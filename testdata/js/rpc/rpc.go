// +build js

// This file was autogenerated by gopherpc.

package rpc

import (
	"io"
	"strings"

	"honnef.co/go/js/xhr"
)

// Client represents a handle to an RPC endpoint.
type Client struct {
	// URL is the endpoint to send RPC requests to.
	URL string

	// CSRFToken is the CSRF token to include with each request.
	CSRFToken string

	// Encoding specifies the encoding of messages sent to and from the
	// RPC server. To use the included JSON implementation, set this to
	// json.Encoding{}.
	Encoding interface {
		// EncodeRequest takes a method name like "Service.Method" and an argument
		// and returns the body of the request to be sent.
		EncodeRequest(serviceMethod string, arg interface{}) ([]byte, error)
		// DecodeResponse decodes the response body represented by r into reply.
		DecodeResponse(r io.Reader, reply interface{}) error
	}
}

func (c Client) call(serviceMethod string, arg, ret interface{}) error {
	message, err := c.Encoding.EncodeRequest(serviceMethod, arg)
	if err != nil {
		return err
	}

	req := xhr.NewRequest("POST", c.URL)
	req.SetRequestHeader("X-CSRF-Token", c.CSRFToken)
	req.SetRequestHeader("Content-Type", "application/json")
	if err := req.Send(message); err != nil {
		return err
	}

	return c.Encoding.DecodeResponse(strings.NewReader(req.ResponseText), &ret)
}

type EchoService struct{ Client }

func (c Client) EchoService() EchoService {
	return EchoService{c}
}

func (s EchoService) Ping() (string, error) {
	var reply string
	err := s.call("EchoService.Ping", nil, &reply)
	return reply, err
}
